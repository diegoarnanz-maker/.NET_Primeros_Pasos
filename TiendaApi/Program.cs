using Microsoft.EntityFrameworkCore;
using TiendaApi.Configurations; // ðŸ”¹ Para AppDbContext
using TiendaApi.Repositories;
using TiendaApi.Services;
using TiendaApi.Mappings;       // ðŸ”¹ Para AutoMapperProfile

var builder = WebApplication.CreateBuilder(args);

// ðŸ”¹ Configurar conexiÃ³n a SQL Server (como DataSource en Spring)
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

// ðŸ”¹ Registrar servicios personalizados (como @Service y @Repository en Spring)
builder.Services.AddScoped<IProductoRepository, ProductoRepositoryImpl>();
builder.Services.AddScoped<IProductoService, ProductoServiceImplMSSql>();

builder.Services.AddScoped<IPedidoService, PedidoServiceImplMSSql>();

// ðŸ”¹ Registrar AutoMapper (como ModelMapper en Java)
builder.Services.AddAutoMapper(typeof(AutoMapperProfile));

// ðŸ”¹ Servicios de ASP.NET Core
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// ðŸ”¹ Swagger solo en entorno de desarrollo
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// ðŸ”¹ Middlewares de seguridad y rutas
app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers(); // ðŸ”¸ Como @RequestMapping en Spring

app.Run(); // ðŸ”š Arranca la API
